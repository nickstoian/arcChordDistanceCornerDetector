step 0:  - open input files and output files
	   (numRows, numCols, minVal, maxVal, label, numPts ) <- read from argv[1]
- dynamically allocate boundPtAry with size of numPts
	- Kchord <-- get from argv[2]
	- dynamically allocate chordAry with size of Kchord // initiallied to 0.0
	- index  <-- 0	  
step 1: (x, y) <-- read from input 
             loadData // store x, y to boundPtAry[index]	   
step 2: index ++; 	  
step 3: repeat step 1 and step 2 until the file is empty // check to make sure index == to numPt-1
step 4: intiallize P1, P2 
step 5: index <-- 0
             currPt <-- P2 + 1
step 6: dist <-- computeDistance (P1, P2, currPt )
             store dist to chordAry[index]
             index ++
             currPt = (currPt + 1) % numPts
step 7: repeat step 6 while index < Kchord
step 8: print chordAry to debugging file (argv[5])
step 9: maxIndex <-- findMaxDist // find the max in chordAry and return that index
             whichIndex <-- (p2 + maxIndex + 1) % numPts	   
             increment bountdPtAry[whichIndex]'s maxCount by one if maxDist != 0.0
             update bountdPtAry[whichIndex]'s maxDist if necessary
step 10: print bountPtAry from P1 to P2 
step 11: Increment P1, and P2, then mod numPts
step 12: repeat step 5 to step 11 until P1 == (Kchord / 2)
step 13: print the info (x, y, maxCount, maxDist) of the entire boundaryAry to argv[5] // five pts per              textline
step 14: compute LocalMaxima for all point in boundPtAry[index], index from 0 to numPts-1
step 15: compute isCorner for all point in boundPtAry[index], index from 0 to numPts-1
step 16: output the info (x, y, corner) of the entire boundaryAry to argv[3]
step 17: Img <-- creat an image of size numRows by numCols
step 18: for each boundaryAry[i], put it corner value at Img(x, y)
step 19: prettyPrint Img to argv[4]
